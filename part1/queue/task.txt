Очередь
Задание 5

Спроектируйте АТД Queue на основе концепции (не шаблона) очереди из занятия по алгоритмам и выполните её реализацию.

повторить занятие сначала

Ссылку на ваше решение заданий на гитхабе введите в форму ниже:

Ваше решение

После нажатия на ОТПРАВИТЬ вы будете автоматически перенаправлены к следующему занятию!


Очереди
Очереди потому и называются очереди, что они работают как очереди: вход (добавление) происходит в хвост очереди, а выход (удаление) -- из её головы.

FIFO, first-in first-out -- первым пришёл, первым вышел
Очередь очевидно моделируется стандартным в большинстве языков типом данных "список" (или динамический массив), который вы возможно уже задействовали в занятии по стеку, если мы можем добавлять в него элементы в конкретную позицию, в частности, в нулевую -- принимаем её за условный хвост. А удаление из головы (принимаем её за последний элемент) происходит удалением этого последнего элемента.

Задания.

1. В классе Queue нам понадобятся три метода: size() (количество элементов в очереди), enqueue(item) -- добавить элемент в хвост очереди, и dequeue(), которая возвращает элемент из головы очереди, удаляя его.

qu = new Queue()
qu.enqueue(1)
qu.enqueue(2)
qu.enqueue(3)
while (qu.size() > 0)
    qu.dequeue()
2. Оцените меру сложности для операций enqueue() (добавление) и dequeue() (удаление) в данной реализации.

3. Напишите функцию, которая "вращает" очередь по кругу на N элементов.

4. Попробуйте реализовать очередь с помощью двух стеков.

предыдущее

заготовка класса C# для автоматической проверки
Как правильно подготовить ваш код для автоматической проверки

using System;
using System.Collections.Generic;

namespace AlgorithmsDataStructures
{

   public class Queue<T>
   {
      public Queue()
      {
       // инициализация внутреннего хранилища очереди
      }

      public void Enqueue(T item)
      {
        // вставка в хвост
      }

      public T Dequeue()
      {
        // выдача из головы
        return default(T); // если очередь пустая
      }

      public int Size()
      {
        return 0; // размер очереди
      }

   }
}
заготовка класса Java для автоматической проверки
Как правильно подготовить ваш код для автоматической проверки

import java.util.*;

public class Queue<T>
{
      public Queue()
      {
       // инициализация внутреннего хранилища очереди
      }

      public void enqueue(T item)
      {
        // вставка в хвост
      }

      public T dequeue()
      {
        // выдача из головы
        return null; // null если очередь пустая
      }

      public int size()
      {
        return 0; // размер очереди
      }

}
заготовка классов C++ для автоматической проверки
Как правильно подготовить ваш код для автоматической проверки

#include <stdio.h>

class Queue
{
  public:
      Queue()
      {
       // инициализация внутреннего хранилища очереди
       // храним положительные целые
      }

      void enqueue(int item)
      {
        // вставка в хвост
      }

      int dequeue()
      {
        // выдача из головы
        return -1; // -1 если очередь пустая
      }

      int size()
      {
        return 0; // размер очереди
      }

};