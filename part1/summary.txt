Абстрактный тип данных (АТД) -- это неявное определение некоторого типа данных в нашей системе, которое формально задаёт некоторое множество объектов и набор допустимых операций над ними.
Класс -- это реализация АТД.

Добавление нового класса в программу определяется исключительно наличием в проекте определяющего этот класс АТД.

Правила проектирования программы:
-- Система типов основана только на классах.
-- Вычислительная модель ООП -- это набор равноправных классов.
-- Методы -- это единственная форма общения между классами.
-- Активно применяем обобщённые типы.
-- По возможности применяем статическую типизацию.
-- Отказываемся от явных структур данных в классах (отвязываемся от конкретной реализации).
При проектировании АТД надо обязательно учитывать и эффективность его реализации.
В процессе проектирования очень важно делать акцент на возможности повторного использования всех компонентов.

В спецификацию АТД добавляем предусловия и постусловия.
Придерживаемся принципа достаточной полноты АТД.
Все методы делим на конструкторы, запросы и команды.
Конструкторы всегда создают объекты в согласованном формате.
Полностью исключаем все абстрактные побочные эффекты.
По возможности избегаем явной обработкой исключений в коде.

Класс -- это базовая строительная единица в нашей программе, она сочетает свойства и типа данных как семантической единицы, и модуля, объединяющего данные и вычисления, и выделяющего код в отдельную синтаксическую единицу.

Придерживаемся единой нотации.
Единственной модульной единицей в проекте всегда остаётся только класс.
Классы обычно группируются в кластеры.
Частично реализованные классы играют важную роль в конструировании системы, фиксируя общее поведение некоторой группы объектов.

далее

Заключение
Мы прошли первый курc по объектно-ориентированному проектированию, посвящённый, пожалуй, самой важной теме в ООАП и ООП, фундаментальной практике -- непосредственному проектированию классов на основе АТД.

Но, скорее всего, в реальных проектах вы редко будете встречать такой формальный подход; почти всегда даже опытные проектировщики придумывают структуру классов бессистемно, интуитивно, на глазок. Однако это не повод для вас заниматься проектированием неправильно. Всегда, когда у вас будет такая возможность, придерживайтесь в рамках своего "кластера" хорошей вышеописанной методики.

Следующий курс по ООАП будет посвящён наследованию и полиморфизму -- фундаментальным подходам ООП, которые при грамотном подходе позволяют разрабатывать системы чрезвычайно высокой сложноти, а трудоёмкость разработки остаётся почти линейной.

Рекомендуемая литература:
"Объектно-ориентированное мышление" Мэтт Вайсфельд
"Основы объектно-ориентированного программирования" Бертран Мейер
"Объектно-ориентированное конструирование программных систем" Бертран Мейер
"Использование абстракций и спецификаций при разработке программ" Барбара Лисков
"Объектно-ориентированный анализ и проектирование" Бретт Маклафлин
"Паттерны проектирования" Фримены