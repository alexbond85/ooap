31. Специфика наследования реализаций
Проектирование иерархии АТД -- задача достаточно высокого уровня абстракции, но когда мы спускаемся на уровень реализации, возникают не менее важные технические моменты. В частности, как правильнее, в каких объёмах, наследовать реализацию родительского класса?

В рамках модели ООП, которую мы изучали на первом курсе, класс -- это (возможно, частичная) реализация АТД. Он включает и публичный интерфейс, заданный АТД, и различные скрытые поля и методы, обеспечивающие эффективную реализацию этого интерфейса. Поэтому, наследуя некоторый класс, практически всегда с наследованием спецификации АТД по умолчанию наследуется и вспомогательная реализация, которая никак не формализована, что обязательно надо учитывать.

Надо ли наследовать реализацию? Если она хорошая, если она гармонично встраивается в классы-потомки, можно её наследовать. Однако надо помнить, что оригинальная реализация в классах-предках со временем вполне может измениться, что приведёт к непредсказуемым последствиям.

Поэтому важно делать выбор сознательно. Если разрешаем в иерархии классов наследование реализаций, тогда надо изучать, как в конкретном языке программирования организовано наследование скрытых полей и методов, чтобы учитывать, насколько реализация может быть защищена от изменений.

Или же классы будут плоскими (программист-пользователь вообще не видит схему наследования) -- придерживаемся исключительно спецификации АТД, но это может потребовать приличной дополнительной работы и дублирования логики реализации. В иерархии повторно используются только интерфейсы-спецификации, вся дополнительная информация внутри класса не наследуется и закрыта для модификаций. В целом, первоначально лучше исходить из этой второй схемы, но не опасаться наследования качественных реализаций, что ООП позволяет организовывать красиво и корректно.

Задание 21.

Приведите пример кода, где выполняется наследование реализации и льготное наследование.