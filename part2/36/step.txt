36. Типичные проблемные особенности наследования-3
Конфликт с упорядоченным списком
Мы увидели, что в процессе проектирования даже достаточно простых систем можно быстро упереться в конфликт. Рассмотрим ещё один пример рассматривавшейся на первом курсе иерархии списков. Мы успешно переделали все занятия из исходного курса по алгоритмам, за исключением упорядоченного списка. Этот случай единственный, который не получится реализовать предложенной методикой, и случай этот достаточно типичный. Но нам надо придерживаться стратегического подхода ООП -- избавляться от всех рутинных и повторяющихся действий, операций, дублирования логики, и на уровне реализации, и на уровне абстракций.

Мы создали родительский класс ParentList, который по сути реализовывал двухсвязный список, только без метода left, после чего добавили ему двух наследников. Обычный список стал его прямым наследником, и при этом вообще никаких изменений не добавлял -- это типичное наследование реализации (или даже льготное наследование). Двухсвязный список расширил класс-предок новой операцией left -- это наследование с расширением.

Упорядоченный список на первый взгляд удобнее всего реализовывать на основе двухсвязного списка, чтобы по нему было быстро и удобно перемещаться в обе стороны при поиске подходящей позиции для добавления нового значения. Однако из-за упоминавшейся проблемы с невозможностью сокрытия родительских методов такая схема не подойдёт. Ведь упорядоченный список подразумевает автоматическое добавление элемента: позиция в списке для каждого элемента определяется скрытно от пользователя класса, в произвольную позицию списка добавлять значения нельзя. И конечно хотелось бы включить упорядоченный список в уже имеющуюся иерархию АТД (ParentList, LinkedList, TwoWayList). Но интерфейс родительского ParentList содержит методы, от которых нам в упорядоченном списке как раз хотелось бы избавиться, а не наследовать их.

В некоторых случаях приходится в иерархию добавлять ещё один уровень, чтобы вычленить ещё более общие операции и избежать дублирования логики одинаковых методов. Подобные манипуляции с проектной системой типов (системой классов) при появлении нового, ранее никак не учитываемого требования со стороны условного заказчика, практически всегда компромисс.

