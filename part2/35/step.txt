35. Типичные проблемные особенности наследования-2
Скрытие методов потомком
Периодически при формировании иерархии наследования возникает потребность в скрытии некоторых компонентов
родительского класса. Это вполне естественный процесс для наследования с ограничением -- потомки в основном уточняют,
специализируют классы-предки, реализуют различные частные случаи, в которых родительские компоненты могут отсутствовать.

Например, в классе Грузовое такси, наследуемого от класса Такси, может отсутствовать условный Багажник. Если у нас
имеется 10 классов-наследников Такси, и у 9 требуется багажник, то конечно лучше его вынести в родительский класс.

В таких случаях проблема решается уточнением предусловий -- на этапе проектирования иерархии классов, потому что
когда соответствующие классы уже реализованы, такое уточнение получится по сути запрещённым усилением.

Так, весь набор операций АТД Такси, связанных с багажником, надо уточнить предусловием "требуется наличие багажника",
и это прямая ответственность аналитика и проектировщика. Однако тут существует тоже довольно типичная
проблема -- подобные требования и уточнения могут возникать, когда проект уже в самом разгаре. Например, грузовые
такси решено было добавить много позже, и добавление нового предусловия в родительский класс (который, скорее всего,
уже закрыт для изменений), ситуацию сильно ухудшит. Немного исправить её можно с помощью абстрактного
предусловия (добавления операции is_trunk(), которая для частично реализованного класса Грузовое такси будет
возвращать false), однако всё равно ряд принципов ООП будет нарушен.

Во многих естественных таксономиях обычно тоже не существует однозначных и строгих правил: обычно иерархии
сопровождаются комментариями "в большинстве случаев" или "за исключением ряда случаев".

Основная рекомендация -- аккуратнее продумывать систему типов в целом, применять весь потенциал ООП, его наиболее
универсальные правила так, чтобы любое нарушение целостности в идеале контролировалось бы статически, на фазе
компиляции. На практике в неоднозначных случаях также применяются паттерны проектирования, которые предлагают
достаточно универсальные методы решения таких типовых проблем. Но эти методы, по сути, просто эвристики, а не
строгие формализмы, и к сожалению, они обычно не имеют под собой хорошей теоретической основы.

Проблема с неоднозначностью таксономий фундаментальная, её нельзя свести к плохому проектированию или слабому
предвидению возможных изменений. Скорее, это глубинная сложность, естественно присущая иерархиям наследования,
и, соответственно, ООП.