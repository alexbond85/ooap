12. Общая структура иерархии классов в проекте
Несмотря на то, что для пользователей прикладной системы типов в проекте каждый класс в идеале
должен быть плоским, внутри проекта все классы, также в идеале, надо объединять в одну иерархию.

Во главе этой иерархии располагается самый базовый, абстрактный (не допускающий создания экземпляров)
класс (например, General), содержащий фундаментальный набор операций:
-- копирование объекта (копирование содержимого одного объекта в другой существующий,
   включая DeepCopy -- глубокое рекурсивное дублирование, подразумевающее также копирование
   содержимого объектов, вложенных в копируемый объект через его поля, атрибуты);
-- клонирование объекта (создание нового объекта и глубокое копирование в него исходного объекта);
-- сравнение объектов (включая глубокий вариант);
-- сериализация/десериализация (перевод в формат, подходящий для удобного ввода-вывода, как
   правило в строковый тип, и восстановление из него);
-- печать (наглядное представление содержимого объекта в текстовом формате);
-- проверка типа (является ли тип текущего объекта указанным типом);
-- получение реального типа объекта (непосредственного класса, экземпляром которого он был создан).

Когда мы добавляем в проект новый класс, не имеющий явного предка в текущей прикладной иерархии,
он должен получить предком универсальный класс General (точнее, Any -- см. следующий абзац).
Во многих языках программирования стандартная система классов уже предлагает подобный
универсальный класс (например, Object в C# и Java), и любой прикладной класс в
программе по умолчанию считается его потомком.

Однако рекомендуется оформить верхушку иерархии в виде двух классов. Самый верхний класс General
содержит упомянутый набор операций, и полностью закрыт для изменений. Его прямой
потомок (например, Any) ничего нового по умолчанию не вносит, но открыт для
модификации, и все новые классы в проекте, не имеющие предка в прикладной иерархии,
наследуются от Any. Архитектор проекта при необходимости вносит какие-то общие компоненты именно в класс Any.

Сформулируем попутно важный прикладной принцип повторного использования: каждый АТД/класс надо
стараться передвигать как можно выше в иерархии наследования (повышать уровень абстракции),
чтобы у него появлялось как можно большее количество классов-потомков, а сам он концентрировал в
себе как можно больше общих черт.

Задание 9.

Постройте в вашем языке программирования базовую иерархию из двух классов General и Any. Унаследуйте
General от универсального базового класса, если таковой имеется в языке или стандартной
библиотеке/фреймворке, и реализуйте семь фундаментальных операций для него, используя для этого по
возможности возможности стандартных библиотек.