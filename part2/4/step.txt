4. Реализация расширяемости модулей
Одна из классических проблем расширяемости -- это форма её реализации.
Можно либо наследовать функциональность, создавая новые модули, либо настраивать её с
помощью различных конфигурационных схем (включая, например, скриптовые языки).

Тут надо отметить некоторую ошибочность классического понятия паттернов проектирования,
которые обычно воспринимаются как просто полезные механические конструкции для решения
конкретных задач. Однако их реальная ценность прежде всего в возможности повторного
использования неких универсальных структур данных, которые мы наследуем и реализовываем,
дополнительно расширяем применительно к своему проекту. Это, в частности, упоминавшиеся
на прошлом курсе классы поведения, в которых открытый интерфейс описывается с помощью
низкоуровневых методов, как правило, отложенных, что обеспечивает высокую гибкость.
Если паттерн достаточно крупный, может получиться целый фреймворк, набор модулей,
хорошо расширяемый каркас.

